Rebeca Refactoring Feature - Complete Implementation Guide
=========================================================

OVERVIEW:
This feature provides semantic-aware renaming of symbols in Rebeca and Property files, similar to Eclipse's built-in refactoring but specifically designed for the Rebeca language.

‚úÖ IMPLEMENTED FEATURES:

üìÅ FILES CREATED:

1. **RebecaRefactoringParticipant.java** - Core refactoring engine
   - Symbol detection and classification
   - Cross-file occurrence finding
   - Context-aware analysis

2. **RebecaRenameDialog.java** - User interface
   - Professional rename dialog
   - Occurrence preview and selection
   - Input validation

3. **RebecaRenameAction.java** - Eclipse integration
   - Action handler for Ctrl+Shift+R
   - Symbol analysis at cursor position
   - Rename operation execution

4. **plugin.xml** - Updated with command registration
   - Command definition
   - Handler binding
   - Key binding (Ctrl+Shift+R)

üéØ SUPPORTED SYMBOLS:

## Rebeca (.rebeca) Files:

### 1. **Class Names**
- **Declaration**: `reactiveclass ClassName(params)`
- **Usage**: `ClassName instance(params):();` (in main block)
- **Usage**: `ClassName varName;` (in knownrebecs)

### 2. **Method Names**
- **Declaration**: `msgsrv methodName(params)`
- **Usage**: `instance.methodName()` (method calls)
- **Usage**: `self.methodName()` (self calls)

### 3. **Variable Names**
- **Declaration**: `boolean varName;` (in statevars)
- **Usage**: `varName = value;` (assignments)
- **Usage**: `if (varName)` (references)

### 4. **Instance Names**
- **Declaration**: `ClassName instanceName;` (in knownrebecs)
- **Usage**: `instanceName.method()` (method calls)
- **Usage**: `ClassName instance(instanceName):();` (in main)

## Property (.property) Files:

### 5. **Property Names**
- **Declaration**: `propertyName = expression;` (in define)
- **Usage**: `propertyName && other` (in expressions)

### 6. **Cross-file References**
- **Instance references**: `phil0.eating` (instance.field)
- **Variable references**: Updates across both .rebeca and .property files

üöÄ HOW TO USE:

## Step 1: Position Cursor
- Open any `.rebeca` or `.property` file
- Place cursor on the symbol you want to rename:
  - Class name (e.g., `Philosopher`)
  - Method name (e.g., `arrive`)
  - Variable name (e.g., `eating`)
  - Instance name (e.g., `phil0`)
  - Property name (e.g., `p0eat`)

## Step 2: Trigger Rename
- Press **Ctrl+Shift+R** (same as Eclipse standard)
- Or use menu: Edit ‚Üí Rename Symbol

## Step 3: Configure Rename
The rename dialog will show:
- **Current name**: The symbol being renamed
- **New name**: Input field (pre-filled with current name)
- **Occurrences list**: All found occurrences with:
  - File name and line number
  - Context (declaration vs usage)
  - Checkbox to include/exclude each occurrence

## Step 4: Review and Execute
- Edit the new name (validates for:
  - Valid identifier format
  - Not a reserved keyword
  - Different from current name)
- Review the occurrences list
- Uncheck any occurrences you don't want to rename
- Click **Rename** to execute

## Step 5: Results
- All selected occurrences are renamed atomically
- Files are automatically saved
- Success message shows count of renamed occurrences

üìã EXAMPLES:

### Example 1: Renaming a Class
```rebeca
reactiveclass Philosopher(3) {  // ‚Üê Place cursor here
    // ...
}

main {
    Philosopher phil0(...):();  // ‚Üê Will be found and renamed
}
```

### Example 2: Renaming a Method
```rebeca
msgsrv arrive() {  // ‚Üê Place cursor here
    // ...
}

msgsrv permit() {
    self.arrive();  // ‚Üê Will be found and renamed
}
```

### Example 3: Renaming a Variable
```rebeca
statevars {
    boolean eating;  // ‚Üê Place cursor here
}

msgsrv eat() {
    eating = true;  // ‚Üê Will be found and renamed
}
```

Property file:
```property
define {
    p0eat = phil0.eating;  // ‚Üê Will also be renamed
}
```

### Example 4: Renaming an Instance
```rebeca
knownrebecs {
    Chopstick chpL;  // ‚Üê Place cursor here
}

msgsrv arrive() {
    chpL.request();  // ‚Üê Will be found and renamed
}
```

üîß TECHNICAL FEATURES:

## Smart Symbol Detection:
- **Context-aware**: Distinguishes between declarations and usages
- **Scope-sensitive**: Understands Rebeca language structure
- **Cross-file**: Finds references across all project files
- **Type-specific**: Different logic for each symbol type

## Safe Renaming:
- **Validation**: Prevents invalid names and reserved keywords
- **Preview**: Shows all occurrences before renaming
- **Selective**: Allow excluding specific occurrences
- **Atomic**: All changes succeed or fail together

## User Experience:
- **Familiar interface**: Similar to Eclipse's built-in refactoring
- **Keyboard shortcut**: Standard Ctrl+Shift+R
- **Visual feedback**: Clear indication of what will be changed
- **Error handling**: Graceful failure with helpful messages

‚öôÔ∏è ADVANCED FEATURES:

### Reserved Keywords Protection:
Prevents renaming to: `reactiveclass`, `msgsrv`, `statevars`, `knownrebecs`, `main`, `if`, `else`, `while`, `for`, `true`, `false`, `self`, `sender`, `boolean`, `int`, `after`, `deadline`, `delay`

### Context Analysis:
- **Declaration detection**: Identifies where symbols are declared
- **Usage detection**: Finds all references and usages
- **Scope awareness**: Understands method, class, and file scopes
- **Type inference**: Determines symbol type from context

### Cross-file Support:
- **Project-wide**: Searches entire project for occurrences
- **Multi-format**: Handles both .rebeca and .property files
- **Consistent updates**: Maintains consistency across file types

üõ†Ô∏è INTEGRATION DETAILS:

### Eclipse Integration:
- **Command framework**: Uses Eclipse command/handler pattern
- **Key binding**: Integrated with Eclipse key binding system
- **Editor integration**: Works with text editors
- **File handling**: Uses Eclipse resource APIs

### Error Handling:
- **Graceful degradation**: Continues on non-critical errors
- **User feedback**: Clear error messages for failures
- **Validation**: Input validation before execution
- **Rollback**: No partial renames on failure

### Performance:
- **Efficient search**: Optimized regex patterns
- **Lazy loading**: Only loads files when needed
- **Memory conscious**: Processes files one at a time
- **Responsive UI**: Non-blocking operation

üìö TECHNICAL ARCHITECTURE:

### Core Components:
1. **RebecaRefactoringParticipant**: Symbol analysis engine
2. **RebecaRenameDialog**: User interface component
3. **RebecaRenameAction**: Eclipse action handler

### Symbol Detection Pipeline:
1. **Cursor Analysis**: Determine symbol at cursor
2. **Context Detection**: Identify symbol type and scope
3. **Project Scanning**: Find all occurrences across files
4. **Classification**: Categorize each occurrence
5. **Presentation**: Display in user interface
6. **Execution**: Perform atomic rename operation

### Pattern Matching:
- **Regex-based**: Uses compiled patterns for efficiency
- **Context-sensitive**: Different patterns for different contexts
- **Boundary-aware**: Respects word boundaries
- **Escape-safe**: Properly handles special characters

This refactoring feature provides professional-grade symbol renaming for Rebeca development, matching the quality and usability of Eclipse's built-in refactoring tools while being specifically tailored to the Rebeca language semantics.
