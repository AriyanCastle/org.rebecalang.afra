RealTimeSyntaxChecker.java - Documentation
==========================================

SUMMARY:
This class implements real-time syntax checking for Rebeca files with 300ms debouncing. It provides instant feedback about syntax errors as the user types, similar to modern IDEs.

PURPOSE:
- Performs syntax checking in real-time as user edits Rebeca code
- Uses 300ms debouncing to avoid excessive checking
- Creates Eclipse error markers using the same system as full compilation
- Optimized for speed - only syntax parsing, no C++ generation
- Shows red X markers on lines with syntax errors
- Displays error messages on hover

KEY METHODS:

1. RealTimeSyntaxChecker(RebecaEditor, IFile)
   - Constructor that initializes Spring context for compiler components
   - Sets up ModelCheckersFilesGenerator and ExceptionContainer
   - Links to the editor and file being edited

2. documentChanged(DocumentEvent)
   - Called when user modifies the document
   - Cancels any pending syntax check
   - Schedules new syntax check with 300ms delay (debouncing)

3. scheduleDelayedSyntaxCheck()
   - Creates a Timer with 300ms delay
   - Ensures only one timer runs at a time
   - Prevents excessive checking during rapid typing

4. performSyntaxCheck()
   - Main syntax checking logic
   - Prevents concurrent checks with isChecking flag
   - Runs in UI thread for marker operations

5. doSyntaxCheck()
   - Creates temporary file with current document content
   - Calls checkSyntaxOnly() for compilation
   - Cleans up temporary files after checking

6. checkSyntaxOnly(File)
   - Uses ModelCheckersFilesGenerator for syntax parsing
   - Creates minimal FileGeneratorProperties for speed
   - Uses temporary output directory (deleted after)
   - Stops at first error for performance optimization

7. createSyntaxErrorMarkers()
   - Creates Eclipse IMarker.PROBLEM markers for syntax errors
   - Uses same CodeCompilationException system as full compiler
   - Tags markers with "syntaxChecker" = "realTime" for identification
   - Only creates marker for first error (performance optimization)

8. clearSyntaxMarkers()
   - Removes only real-time syntax markers
   - Preserves other markers (compilation errors, warnings, etc.)
   - Uses "syntaxChecker" attribute to identify real-time markers

INTEGRATION:
- Integrated into RebecaEditor.createPartControl()
- Started via startChecking(IDocument)
- Stopped via stopChecking(IDocument)
- Cleaned up in RebecaEditor.dispose()

DEBOUNCING STRATEGY:
- 300ms delay after last document change
- Cancels previous timer when new changes occur
- Prevents checking during rapid typing
- Balances responsiveness with performance

PERFORMANCE OPTIMIZATIONS:
1. Syntax-only checking (no C++ generation)
2. Temporary files for isolated compilation
3. Stop at first error (fast-fail)
4. Minimal FileGeneratorProperties
5. Skip safe mode and progress reporting
6. Concurrent check prevention
7. Efficient marker management

COMPILER INTEGRATION:
- Uses same Spring context as main compiler (RMCConfig, CompilerConfig)
- Same extension detection logic (Core, Timed, Probabilistic Rebeca)
- Same FileGeneratorProperties creation
- Same error handling with CodeCompilationException
- Compatible with all project types and language versions

ERROR MARKERS:
- Creates IMarker.PROBLEM with SEVERITY_ERROR
- Sets line number from CodeCompilationException
- Sets error message from exception
- Tags with "syntaxChecker" = "realTime"
- Visible as red X in editor margin
- Shows error message on hover

LIFECYCLE:
1. Created in RebecaEditor.initializeRealTimeSyntaxChecker()
2. Started when editor opens document
3. Listens to document changes via IDocumentListener
4. Performs checks with debouncing
5. Cleaned up when editor closes/disposes

USER EXPERIENCE:
- Immediate feedback for syntax errors
- Non-intrusive (300ms delay)
- Same visual indicators as full compilation
- Works while typing without blocking
- Preserves full compilation markers
- Auto-clears when errors are fixed

TECHNICAL DETAILS:
- Uses Timer for debouncing (daemon thread)
- File operations in temporary directory
- UI thread for marker operations
- Exception safety with try-finally blocks
- Graceful fallbacks for configuration errors
- Compatible with all Rebeca language variants

EXAMPLE WORKFLOW:
1. User types in Rebeca editor
2. documentChanged() triggered
3. 300ms timer started
4. If no more changes in 300ms, syntax check runs
5. Temporary file created with current content
6. Compiler parses for syntax errors
7. Error markers created/updated in editor
8. User sees red X and error message
9. Process repeats on next change
